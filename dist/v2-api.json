{
  "swagger": "2.0",
  "info": {
    "version": "",
    "title": "TopCoder API",
    "description": "TODO: Add a description",
    "license": {
      "name": "MIT",
      "url": "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
    }
  },
  "host": "api.topcoder.com",
  "basePath": "/v2",
  "securityDefinitions": {},
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/auth": {
      "post": {
        "description": "",
        "tags": [
          "Authorization"
        ],
        "operationId": "Create JWT Token_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The username"
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The password"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateJWTTokenresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/reauth": {
      "post": {
        "description": "",
        "tags": [
          "Authorization"
        ],
        "operationId": "Create_Refresh JWT Token_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The old JWT token"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RefreshJWTTokenresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/validation/sso": {
      "get": {
        "description": "",
        "tags": [
          "Authorization"
        ],
        "operationId": "Get_Validate SSO Cookie_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Cookie",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The sso cookie"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ValidateSSOCookieresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/reports/costs/{startDate}/{endDate}?clientid={clientId}&billingId={billingId}&projectId={projectId}&challengeId={challengeId}": {
      "get": {
        "description": "",
        "tags": [
          "Reports"
        ],
        "operationId": "Get_Challenge Costs_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Start Date"
          },
          {
            "name": "endDate",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "End Date"
          },
          {
            "name": "clientId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "Client Id"
          },
          {
            "name": "billingId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "Billing Id"
          },
          {
            "name": "projectId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "Project Id"
          },
          {
            "name": "challengeId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "Challenge Id"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ChallengeCostsresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/reports/client/costs/?startDate={startDate}&endDate={endDate}&clientid={clientId}&sfdcAccountId={sfdcAccountId}&customerNumber={customerNumer}": {
      "get": {
        "description": "",
        "tags": [
          "Reports"
        ],
        "operationId": "Get_Client Challenge Costs_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Start Date"
          },
          {
            "name": "endDate",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "End Date"
          },
          {
            "name": "clientId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "Client Id"
          },
          {
            "name": "sfdcAccountId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "SFDC Account Id"
          },
          {
            "name": "customerNumber",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Customer Number"
          },
          {
            "name": "customerNumer",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ClientChallengeCostsresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/reports/client/activeCosts/?clientid={clientId}&sfdcAccountId={cmc}&customerNumber={customerNumber}": {
      "get": {
        "description": "",
        "tags": [
          "Reports"
        ],
        "operationId": "Get_Client Active Challenge Costs_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "Client Id"
          },
          {
            "name": "sfdcAccountId",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "CMC account ID"
          },
          {
            "name": "customerNumber",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Customer number"
          },
          {
            "name": "cmc",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ClientActiveChallengeCostsresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/reports/analyze?projectId={projectId}&openRegistrationDateFrom={openRegistrationDateFrom}&openRegistrationDateTo={openRegistrationDateTo}&challengeType={challengeType}&challengeName={challengeName}&prizeLower={prizeLower}&prizeUpper={prizeUpper}": {
      "get": {
        "description": "",
        "tags": [
          "Reports"
        ],
        "operationId": "Get_Challenge Analyze_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The project id."
          },
          {
            "name": "openRegistrationDateFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The open registration date from."
          },
          {
            "name": "openRegistrationDateTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The open registration date to."
          },
          {
            "name": "challengeType",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The challenge type."
          },
          {
            "name": "challengeName",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The challenge name."
          },
          {
            "name": "prizeLower",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The prize lower bound"
          },
          {
            "name": "prizeUpper",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The prize upper bound."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/reports/{track}?startDate={startDate}&endDate={endDate}": {
      "get": {
        "description": "",
        "tags": [
          "Reports"
        ],
        "operationId": "Get_Track Statistics_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "track",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Track Name. Only allow \"Design\", \"Develop\" and \"Data\""
          },
          {
            "name": "startDate",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "timespan start date"
          },
          {
            "name": "endDate",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "timespan end date"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TrackStatisticsresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/platform/activitySummary": {
      "get": {
        "description": "",
        "tags": [
          "Platform"
        ],
        "operationId": "Get Activity Summary_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetActivitySummaryresponse"
            }
          }
        }
      }
    },
    "/platform/activeBillingAccounts": {
      "get": {
        "description": "",
        "tags": [
          "Platform"
        ],
        "operationId": "Get_Active Billing Accounts_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/platform/customer": {
      "post": {
        "description": "",
        "tags": [
          "Platform"
        ],
        "operationId": "Create Customer_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The customer name"
          },
          {
            "name": "customerNumber",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The customer number"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateCustomerresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/platform/billing": {
      "post": {
        "description": "",
        "tags": [
          "Platform"
        ],
        "operationId": "Create Billing_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "subscriptionNumber",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The subscription number of the project to create"
          },
          {
            "name": "customerNumber",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The customer number of the client with which to associate the project"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The billing account start date"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The billing account end date"
          },
          {
            "name": "billingAccountId",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The billing account id"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "billing account active status (1 - active, 0 - inactive)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateBillingresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/platform/billings/{billingAccountId}/users": {
      "post": {
        "description": "",
        "tags": [
          "Platform"
        ],
        "operationId": "Update Billing Account Permission_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "billingAccountId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The billing account id that account to update"
          },
          {
            "name": "users",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The users to attach to billing account"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UpdateBillingAccountPermissionresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/platform/leaderboard": {
      "get": {
        "description": "",
        "tags": [
          "Platform"
        ],
        "operationId": "Get Leaderboard_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The leaderboard type"
          },
          {
            "name": "utmMedium",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The referral type"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetLeaderboardresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/{challengeId}": {
      "get": {
        "description": "",
        "tags": [
          "Studio Challenges"
        ],
        "operationId": "Get Studio Challenge Detail_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetStudioChallengeDetailresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/registrants/{challengeId}": {
      "get": {
        "description": "",
        "tags": [
          "Platform"
        ],
        "operationId": "Get Challenge Registrants_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetChallengeRegistrantsresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/submissions/{challengeId}": {
      "get": {
        "description": "",
        "tags": [
          "Platform"
        ],
        "operationId": "Get Challenge Submissions_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetChallengeSubmissionsresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/phases/{challengeId}": {
      "get": {
        "description": "",
        "tags": [
          "Platform"
        ],
        "operationId": "Get Challenge Phases_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetChallengePhasesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users": {
      "post": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Create a new user via social login_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "schema": {
              "$ref": "#/definitions/Createanewuserviasocialloginrequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Createanewuserviasocialloginresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "422": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/{handle}": {
      "get": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Get_Public Profile_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Member Handle"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PublicProfileresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/user/profile": {
      "get": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Get_My Profile_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MyProfileresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      },
      "post": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Create_My Profile_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/user/activation-email": {
      "get": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Get_My Profile_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MyProfileresponse24"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/user/{handle}/challenges/develop?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}": {
      "get": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Get User Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Member Handle"
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null.It should be one of id, type, placement, prize, numContestants, numSubmissions, codingDuration."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetUserChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/user/{handle}/challenges/design?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}": {
      "get": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Get User Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Member Handle"
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null,it's value should be one of id, type, placement, prize, num_contestants, num_submitters, coding_duration."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetUserChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/user/challenges?type={type}&pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}&challengeType={challengeType}&platforms={platforms}&technologies={technologies}&prizeLowerBound={prizeLowerBound}&prizeUpperBound={prizeUpperBound}": {
      "get": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Search My Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "type (design or develop)"
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          },
          {
            "name": "communityId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The community id."
          },
          {
            "name": "submissionEndFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date from value."
          },
          {
            "name": "submissionEndTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date to value."
          },
          {
            "name": "challengeType",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "challenge type"
          },
          {
            "name": "platforms",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "platforms filter"
          },
          {
            "name": "technologies",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "technologies filter"
          },
          {
            "name": "prizeLowerBound",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "prize lowerbound"
          },
          {
            "name": "prizeUpperBound",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "prize upperbound"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SearchMyChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/user/identity": {
      "get": {
        "description": "Request",
        "tags": [
          "User Profile"
        ],
        "operationId": "Search My Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SearchMyChallengesresponse28"
            }
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/user/{handle}/challenges/algo?pageIndex={pageIndex}&pageSize={pageSize}&sortOrder={sortOrder}&sortColumn={sortColumn}": {
      "get": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Get User Algo Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "the user handle that to search"
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The page index of the returned resources. 1-based. It can be null. The default value will be 1"
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The page size of the returned resources. 1-based. It can be null. The default value will be 10."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetUserAlgoChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/user/{handle}/challenges/marathon?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}": {
      "get": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Get User Marathon Matches Information_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "the user handle that to search"
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The page index of the returned resources. 1-based. It can be null. The default value will be 1"
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The page size of the returned resources. 1-based. It can be null. The default value will be 10."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null. The valid value are 'id', 'type', 'placement', 'numContestants', 'numSubmitters', 'codingDuration'."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetUserMarathonMatchesInformationresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/validate/{handle}": {
      "get": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Get_Validate Handle_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Member Handle"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ValidateHandleresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/validateSocial?socialProviderId={socialProviderId}&socialUserId={socialUserId}": {
      "get": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Get_Validate Handle_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "socialProviderId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "social provider id"
          },
          {
            "name": "socialUserId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "social user id"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ValidateHandleresponse32"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/resetToken/?handle={handle}&email={email}": {
      "get": {
        "description": "- return \"successful\" flag set to true",
        "tags": [
          "User Profile"
        ],
        "operationId": "Get_Generate Reset Token_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Member Handle or Social Login Username"
          },
          {
            "name": "email",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Member Email (mutually exclusive with handle parameter)"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GenerateResetTokenresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/resetPassword/{handle}": {
      "post": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Create_Reset Password_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Member Handle"
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The reset password token"
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The new password"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ResetPasswordresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/password": {
      "post": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Update Password_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "oldPassword",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The old password"
          },
          {
            "name": "newPassword",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The new password"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UpdatePasswordresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/activate?code={code}": {
      "get": {
        "description": "",
        "tags": [
          "User Profile"
        ],
        "operationId": "Get_Activate User_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The activation code"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ActivateUserresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/photo": {
      "post": {
        "description": "Request",
        "tags": [
          "User Profile"
        ],
        "operationId": "Upload Member Photo_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "photo",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "file",
            "format": "file",
            "description": "The photo file."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UploadMemberPhotoresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/develop/reviewOpportunities/?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}": {
      "get": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Get Review Opportunities_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "You can set multi key=value pair parameters to set the filter parameters. The filter parameter can only be following key: reviewType, challengeName, challengeType, reviewStartDate.type, reviewStartDate.firstDate, reviewStartDate.secondDate, reviewEndDate.type, reviewEndDate.firstDate, reviewEndDate.secondDate, reviewPaymentLowerBound, reviewPaymentUpperBound. For the reviewStartDate and reviewEndDate's type, it can only be(case sensitive) BEFORE, AFTER, ON, BETWEEN_DATES, BEFORE_CURRENT_DATE, AFTER_CURRENT_DATE. When the type is BETWEEN_DATES, the secondDate should be provided. The date value should follow this pattern YYYY-MM-DD."
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Value of the filter key-value pair"
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The page index of the returned resources. 1-based. It can be null. The default value will be 1"
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The page size of the returned resources. 1-based. It can be null. The default value will be 10."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetReviewOpportunitiesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/develop/reviewOpportunities/{challengeId}": {
      "get": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Get Review Opportunity Information_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetReviewOpportunityInformationresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/develop/reviewOpportunities/{challengeId}/apply": {
      "post": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Create_Apply Develop Review Opportunity Information_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          },
          {
            "name": "reviewApplicationRoleId",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The review application role id to apply."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "x-is-map": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApplyDevelopReviewOpportunityInformationresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/design/reviewOpportunities/:challengeId/apply": {
      "post": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Create_Apply Design Review Opportunity_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The challenge id"
          },
          {
            "name": "isSpecReview",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The spec review flag"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ApplyDesignReviewOpportunityresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/develop/reviewers/{contestType}": {
      "get": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "List reviewers of current challenge type_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contestType",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The type of the challenge. It can be 'Assembly', 'ComponentDevelopment', 'TestSuites', 'Reporting', 'ComponentDesign', 'Conceptualization', 'Specification', 'Architecture', 'UIPrototype', 'RIABuild', 'ContentCreation', 'TestScenarios', 'BugHunt'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Listreviewersofcurrentchallengetyperesponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/{handle}/statistics/develop?track={track}": {
      "get": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Get_Software Member Statistics_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Member Handle"
          },
          {
            "name": "track",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The track name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/develop/statistics/{handle}/{challengeType}": {
      "get": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Get_Software Member Rating History and Distribution_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Member Handle"
          },
          {
            "name": "challengeType",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Challenge Type"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SoftwareMemberRatingHistoryandDistributionresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/develop/challengetypes": {
      "get": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "List all challenge types_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Listallchallengetypesresponse"
              }
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/active?type=develop&pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}&type={type}&platforms={platforms}&technologies={technologies}&prizeLowerBound={prizeLowerBound}&prizeUpperBound={prizeUpperBound}": {
      "get": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Search Active Software Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          },
          {
            "name": "communityId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The community id."
          },
          {
            "name": "submissionEndFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date from value."
          },
          {
            "name": "submissionEndTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date to value."
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "challenge type"
          },
          {
            "name": "platforms",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "platforms filter"
          },
          {
            "name": "technologies",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "technologies filter"
          },
          {
            "name": "prizeLowerBound",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "prize lowerbound"
          },
          {
            "name": "prizeUpperBound",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "prize upperbound"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SearchActiveSoftwareChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/open?type=develop&pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}&type={type}&platforms={platforms}&technologies={technologies}&prizeLowerBound={prizeLowerBound}&prizeUpperBound={prizeUpperBound}": {
      "get": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Search Open Software Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          },
          {
            "name": "communityId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The community id."
          },
          {
            "name": "submissionEndFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date from value."
          },
          {
            "name": "submissionEndTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date to value."
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "challenge type"
          },
          {
            "name": "platforms",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "platforms filter"
          },
          {
            "name": "technologies",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "technologies filter"
          },
          {
            "name": "prizeLowerBound",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "prize lowerbound"
          },
          {
            "name": "prizeUpperBound",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "prize upperbound"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SearchOpenSoftwareChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/past?type=develop&pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}&type={type}&platforms={platforms}&technologies={technologies}&prizeLowerBound={prizeLowerBound}&prizeUpperBound={prizeUpperBound}": {
      "get": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Search Past Software Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          },
          {
            "name": "communityId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The community id."
          },
          {
            "name": "submissionEndFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date from value."
          },
          {
            "name": "submissionEndTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date to value."
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "challenge type"
          },
          {
            "name": "platforms",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "platforms filter"
          },
          {
            "name": "technologies",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "technologies filter"
          },
          {
            "name": "prizeLowerBound",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "prize lowerbound"
          },
          {
            "name": "prizeUpperBound",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "prize upperbound"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/upcoming?type=develop&pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}&type={type}&platforms={platforms}&technologies={technologies}&prizeLowerBound={prizeLowerBound}&prizeUpperBound={prizeUpperBound}": {
      "get": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Search Upcoming Software Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          },
          {
            "name": "communityId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The community id."
          },
          {
            "name": "submissionEndFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date from value."
          },
          {
            "name": "submissionEndTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date to value."
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "challenge type"
          },
          {
            "name": "platforms",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "platforms filter"
          },
          {
            "name": "technologies",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "technologies filter"
          },
          {
            "name": "prizeLowerBound",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "prize lowerbound"
          },
          {
            "name": "prizeUpperBound",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "prize upperbound"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SearchUpcomingSoftwareChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/develop/challenges/result/{challengeId}": {
      "get": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Get Software Challenge Result_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/develop/challenges/checkpoint/{challengeid}": {
      "get": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Get Software Challenge Checkpoint Detail_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeid",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The submission id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetSoftwareChallengeCheckpointDetailresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/develop/challenges/{challengeid}/submit": {
      "post": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Upload a submission by using base64 encoding_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeid",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          },
          {
            "name": "fileName",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The name of the file that is being uploaded"
          },
          {
            "name": "fileData",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The Base64 encoded content of the file being uploaded. The example value is 'Hello World' base64 encoded"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The type of submission. Can be 'final' or 'checkpoint'. If absent, 'final' is assumed."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Uploadasubmissionbyusingbase64encodingresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "413": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/develop/challenges/{challengeid}/upload": {
      "post": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Upload a submission by using direct file upload_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeid",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          },
          {
            "name": "submissionFile",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The submission zip"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The type of submission. Can be 'final' or 'checkpoint'. If absent, 'final' is assumed."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Uploadasubmissionbyusingdirectfileuploadresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "413": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/design/challenges/{challlengeId}/submit": {
      "post": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Upload a submission_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challlengeId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The challenge id"
          },
          {
            "name": "submissionFile",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The submission zip"
          },
          {
            "name": "sourceFile",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The source zip"
          },
          {
            "name": "previewFile",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The preview image file"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The type of submission. Can be 'submission' or 'checkpoint'. If absent, 'submission' is assumed."
          },
          {
            "name": "fonts",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Double pipe separated font sources"
          },
          {
            "name": "fontNames",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Double pipe separated font names"
          },
          {
            "name": "fontUrls",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Double pipe separated font urls"
          },
          {
            "name": "stockArtNames",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Double pipe separated stock art names"
          },
          {
            "name": "stockArtFileNumbers",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Double pipe separated stock art file numbers"
          },
          {
            "name": "stockArtUrls",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Double pipe separated font urls"
          },
          {
            "name": "rank",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The rank of a submission"
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "optional comment"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Uploadasubmissionresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/develop/statistics/tops/{contestType}?pageIndex={pageIndex}&pageSize={pageSize}": {
      "get": {
        "description": "",
        "tags": [
          "Software Challenges"
        ],
        "operationId": "Get_Top Ranked Members_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contestType",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Contest Type, support \"design\", \"development\", \"conceptualization\", \"specification\", \"architecture\", \"assembly\", \"test_suites\", \"test_scenarios\", \"ui_prototype\", \"ria_build\", \"content_creation\""
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null. Default 1."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set. Default 50."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TopRankedMembersresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/active?&type=design&pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}": {
      "get": {
        "description": "",
        "tags": [
          "Studio Challenges"
        ],
        "operationId": "Search Active Studio Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          },
          {
            "name": "communityId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The community id."
          },
          {
            "name": "submissionEndFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date from value."
          },
          {
            "name": "submissionEndTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date to value."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SearchActiveStudioChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/open?type=design&pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}": {
      "get": {
        "description": "",
        "tags": [
          "Studio Challenges"
        ],
        "operationId": "Search Open Studio Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          },
          {
            "name": "communityId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The community id."
          },
          {
            "name": "submissionEndFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date from value."
          },
          {
            "name": "submissionEndTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date to value."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SearchOpenStudioChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/past?type=design&pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}": {
      "get": {
        "description": "",
        "tags": [
          "Studio Challenges"
        ],
        "operationId": "Search Past Studio Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          },
          {
            "name": "communityId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The community id."
          },
          {
            "name": "submissionEndFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date from value."
          },
          {
            "name": "submissionEndTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date to value."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SearchPastStudioChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/upcoming?type=design&pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}": {
      "get": {
        "description": "",
        "tags": [
          "Studio Challenges"
        ],
        "operationId": "Search Upcoming Studio Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          },
          {
            "name": "communityId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The community id."
          },
          {
            "name": "submissionEndFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date from value."
          },
          {
            "name": "submissionEndTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date to value."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SearchUpcomingStudioChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/design/challenges/result/{challengeId}": {
      "get": {
        "description": "",
        "tags": [
          "Studio Challenges"
        ],
        "operationId": "Get Studio Challenge Result_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/design/challenges/checkpoint/{challengeid}": {
      "get": {
        "description": "",
        "tags": [
          "Studio Challenges"
        ],
        "operationId": "Get Studio Challenge Checkpoint Detail_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeid",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The submission id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetStudioChallengeCheckpointDetailresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/design/reviewOpportunities?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}": {
      "get": {
        "description": "",
        "tags": [
          "Studio Challenges"
        ],
        "operationId": "Get Design Review Opportunities_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "You can set multi key=value pair parameters to set the filter parameters. The filter parameter can only be following key: reviewType, challengeName, challengeType, reviewStartDate.type, reviewStartDate.firstDate, reviewStartDate.secondDate, reviewEndDate.type, reviewEndDate.firstDate, reviewEndDate.secondDate, reviewPaymentLowerBound, reviewPaymentUpperBound. For the reviewStartDate and reviewEndDate's type, it can only be(case sensitive) BEFORE, AFTER, ON, BETWEEN_DATES, BEFORE_CURRENT_DATE, AFTER_CURRENT_DATE. When the type is BETWEEN_DATES, the secondDate should be provided. The date value should follow this pattern YYYY-MM-DD."
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Value of the filter key-value pair"
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The page index of the returned resources. 1-based. It can be null. The default value will be 1"
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The page size of the returned resources. 1-based. It can be null. The default value will be 10."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetDesignReviewOpportunitiesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/design/reviewOpportunities/{id}": {
      "get": {
        "description": "",
        "tags": [
          "Studio Challenges"
        ],
        "operationId": "Get Review Opportunity Information_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetReviewOpportunityInformationresponse61"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/design/challengetypes": {
      "get": {
        "description": "",
        "tags": [
          "Studio Challenges"
        ],
        "operationId": "List all challenge types_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Listallchallengetypesresponse"
              }
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/{handle}/statistics/design": {
      "get": {
        "description": "",
        "tags": [
          "Studio Challenges"
        ],
        "operationId": "Get_Studio Member Statistics_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Member Handle"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/{handle}/statistics/design/recentWins?numberOfRecentWins={numberOfRecentWins}": {
      "get": {
        "description": "",
        "tags": [
          "Studio Challenges"
        ],
        "operationId": "Get_Studio Member Recent Winning Submissions_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Member Handle"
          },
          {
            "name": "numberOfRecentWins",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "number of recent wins.The default value will be 7."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/design/statistics/tops/{challengeType}": {
      "get": {
        "description": "",
        "tags": [
          "Studio Challenges"
        ],
        "operationId": "Get_Top Ranked Members_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeType",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The type of the challenge"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TopRankedMembersresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/platforms": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get_Platforms_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Platformsresponse"
            }
          }
        }
      }
    },
    "/data/technologies": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get_Technologies_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Technologiesresponse"
            }
          }
        }
      }
    },
    "/data/challengetypes": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "List all challenge types_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Listallchallengetypesresponse"
              }
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/reviewOpportunities": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "List all review opportunities_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/reviewopportunities/{id}": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get algorithm review opportunity details_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of this review opportunity."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Getalgorithmreviewopportunitydetailsresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/problems/:problemId/rounds": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get SRM Rounds For Problem_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "problemId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The problemId to get the rounds for."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetSRMRoundsForProblemresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/challenges?listType={listType}&pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder={sortOrder}": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get_View Algorithm SRM Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "listType",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The type of challenges to search. It can only be 'ACTIVE' or 'UPCOMING'. If it's null, 'Active' will be used."
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Key of the filter key-value pair"
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Value of the filter key-value pair"
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewAlgorithmSRMChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/practice/problems?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&problemId={problemId}&problemName={problemName}&problemTypes={problemTypes}&statuses={statuses}&myPointsLowerBound={myPointsLowerBound}&myPointsUpperBound={myPointsUpperBound}&pointsUpperBound={pointsUpperBound}&pointsLowerBound={pointsLowerBound}": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get SRM Practice Problems_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          },
          {
            "name": "problemId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The problem id."
          },
          {
            "name": "problemName",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The name of problem."
          },
          {
            "name": "problemTypes",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The type of problem. It support multiple values in the request. Like 'problemTypes=single,team'."
          },
          {
            "name": "statuses",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The status of problem. The value can only be 'New', 'Viewed', 'Solved' or the combination of these values, like 'new,viewed'."
          },
          {
            "name": "myPointsLowerBound",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The lower bound for my points field."
          },
          {
            "name": "myPointsUpperBound",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The upper bound for my points field."
          },
          {
            "name": "difficulty",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The difficulty of problem. The value can be 'Easy', 'Medium', 'Hard' or the combination of these values, like 'easy, hard'."
          },
          {
            "name": "pointsUpperBound",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The upper bound for points field."
          },
          {
            "name": "pointsLowerBound",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The lower bound for points field."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetSRMPracticeProblemsresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/schedule?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&statuses={statuses}&types={types}&registrationStartTimeBefore={registrationStartTimeBefore}&registrationEndTimeBefore={registrationEndTimeBefore}&codingStartTimeBefore={codingStartTimeBefore}&codingEndTimeBefore={codingEndTimeBefore}&intermissionStartTimeBefore={intermissionStartTimeBefore}&intermissionEndTimeBefore={intermissionEndTimeBefore}&challengeStartTimeBefore={challengeStartTimeBefore}&challengeEndTimeBefore={challengeEndTimeBefore}&systestStartTimeBefore={systestStartTimeBefore}&systestEndTimeBefore={systestEndTimeBefore}&registrationStartTimeAfter={registrationStartTimeAfter}&registrationEndTimeAfter={registrationEndTimeAfter}&codingStartTimeAfter={codingStartTimeAfter}&codingEndTimeAfter={codingEndTimeAfter}&intermissionStartTimeAfter={intermissionStartTimeAfter}&intermissionEndTimeAfter={intermissionEndTimeAfter}&challengeStartTimeAfter={challengeStartTimeAfter}&challengeEndTimeAfter={challengeEndTimeAfter}&systestStartTimeAfter={systestStartTimeAfter}&systestEndTimeAfter={systestEndTimeAfter}": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get SRM Schedule_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          },
          {
            "name": "statuses",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The status of the rounds. The value can only be 'A', 'F', 'P' or the combination of these values, like 'A,F,P'."
          },
          {
            "name": "types",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The types of the rounds. The value can only be 'Single Round Match', 'Long Round', 'Tournament Round' or the combination of these values, like 'Single Round Match, Long Round'."
          },
          {
            "name": "registrationStartTimeBefore",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The upper bound of the registration start time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "registrationStartTimeAfter",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The lower bound of the registration start time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "registrationEndTimeBefore",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The upper bound of the registration end time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "registrationEndTimeAfter",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The lower bound of the registration end time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "codingStartTimeBefore",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The upper bound of the coding start time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "codingStartTimeAfter",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The lower bound of the coding start time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "codingEndTimeBefore",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The upper bound of the coding end time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "codingEndTimeAfter",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The lower bound of the coding end time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "intermissionStartTimeBefore",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The upper bound of the intermission start time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "intermissionStartTimeAfter",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The lower bound of the intermission start time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "intermissionEndTimeBefore",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The upper bound of the intermission end time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "intermissionEndTimeAfter",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The lower bound of the intermission end time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "challengeStartTimeBefore",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The upper bound of the challenge start time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "challengeStartTimeAfter",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The lower bound of the challenge start time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "challengeEndTimeBefore",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The upper bound of the challenge end time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "challengeEndTimeAfter",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The lower bound of the challenge end time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "systestStartTimeBefore",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The upper bound of the system test start time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "systestStartTimeAfter",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The lower bound of the system test start time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "systestEndTimeBefore",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The upper bound of the system test end time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          },
          {
            "name": "systestEndTimeAfter",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The lower bound of the system test end time. The time format should be \"YYYY-MM-DDTHH:mm:ss.SSSZ\"."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetSRMScheduleresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/marathon/challenges?listType={listType}&pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder={sortOrder}": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get_View Algorithm Marathon Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "listType",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The type of challenges to search. It can only be 'ACTIVE', 'OPEN', 'PAST' or 'UPCOMING'. If it's null, 'Active' will be used."
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Key of the filter key-value pair"
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Value of the filter key-value pair"
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewAlgorithmMarathonChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/dataScience/challenges/past?pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get_View Past Data Science Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          },
          {
            "name": "submissionEndFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date from value."
          },
          {
            "name": "submissionEndTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date to value."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewPastDataScienceChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/dataScience/challenges/active?submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get_View Active Data Science Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "submissionEndFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date from value."
          },
          {
            "name": "submissionEndTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date to value."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewActiveDataScienceChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/dataScience/challenges/upcoming?submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get_View Upcoming Data Science Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "submissionEndFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date from value."
          },
          {
            "name": "submissionEndTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date to value."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ViewUpcomingDataScienceChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/rounds/{contestId}": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "List Round for a Contest_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "contestId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "integer",
            "format": "int32",
            "description": "contest's id for listing"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ListRoundforaContestresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/rounds/{roundId}": {
      "delete": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Delete_Delet SRM Contest Round API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DeletSRMContestRoundAPIresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/marathon/challenges/{id}": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get Algorithm Marathon Detail_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetAlgorithmMarathonDetailresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/challenges/{id}": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get Algorithm SRM Detail_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetAlgorithmSRMDetailresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/marathon/challenges/{roundId}/regInfo": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get Marathon Match Challenge Reg Info_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge round id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetMarathonMatchChallengeRegInforesponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/marathon/challenges/{roundId}/register": {
      "post": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Create_Register Marathon Match Challenge_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge round id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RegisterMarathonMatchChallengeresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/{handle}/statistics/data/marathon": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get_Algorithm Member Marathon Statistics_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Member Handle"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/{handle}/statistics/data/srm": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get_Algorithm Member SRM Statistics_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Member Handle"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/marathon/statistics/tops?rankType={rankType}": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get_Top Ranked Marathon Members_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rankType",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Ranking Type, support \"Competitors\", \"Schools\" and \"Countries.\" Currently only applicable to SRM challenge type."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TopRankedMarathonMembersresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/statistics/tops?rankType={rankType}&pageIndex={pageIndex}&pageSize={pageSize}": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "Get_Top Ranked SRM Members_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "rankType",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Ranking Type, support \"Competitors\", \"Schools\" and \"Countries.\" Currently only applicable to SRM challenge type."
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The page index of the returned resources. 1-based. It can be null. The default value will be 1"
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The page size of the returned resources. 1-based. It can be null. The default value will be 10."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TopRankedSRMMembersresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/countries": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "List of countries_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Listofcountriesresponse"
              }
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/timezones": {
      "get": {
        "description": "",
        "tags": [
          "Data"
        ],
        "operationId": "List of timezones_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Listoftimezonesresponse"
              }
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/bugs/{jiraProjectId}/{status}": {
      "get": {
        "description": "",
        "tags": [
          "Open Bugs API"
        ],
        "operationId": "Get_Bugs_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jiraProjectId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The project id. Default BUGR."
          },
          {
            "name": "status",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The issue status. It can OPEN, CLOSED or ALL. Default OPEN."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Bugsresponse"
              }
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/terms/{challengeId}": {
      "get": {
        "description": "",
        "tags": [
          "Open Bugs API"
        ],
        "operationId": "Get_Terms of Use for a challenge_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge for which to get terms of use"
          },
          {
            "name": "role",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The role of the user"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/{challengeId}/register": {
      "get": {
        "description": "",
        "tags": [
          "Open Bugs API"
        ],
        "operationId": "Get_Register for a software/studio challenge_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge for which to register"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Registerforasoftware/studiochallengeresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/{challengeId}/unregister": {
      "post": {
        "description": "",
        "tags": [
          "Open Bugs API"
        ],
        "operationId": "Create_Unregister for a software/studio challenge_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge for which to Unregister"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Unregisterforasoftware/studiochallengeresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/terms/detail/{termsOfUseId}": {
      "get": {
        "description": "",
        "tags": [
          "Terms Of Use API"
        ],
        "operationId": "Get_View terms of use by id_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "termsOfUseId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of terms of use"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Viewtermsofusebyidresponse"
            }
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/rounds/:roundId/terms": {
      "get": {
        "description": "- Only when jwt passed can we get the round terms of use.",
        "tags": [
          "Terms Of Use API"
        ],
        "operationId": "Get round terms of use by round id_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of round"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Getroundtermsofusebyroundidresponse"
            }
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      },
      "post": {
        "description": "",
        "tags": [
          "Deprecated APIs"
        ],
        "operationId": "Create_Set Round Terms API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of the round to set."
          },
          {
            "name": "terms",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The terms parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SetRoundTermsAPIresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/terms/{termsOfUseId}/agree": {
      "post": {
        "description": "- Only when jwt passed can we agree the terms of use.",
        "tags": [
          "Terms Of Use API"
        ],
        "operationId": "Create_Agree terms of use by id_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "termsOfUseId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of terms of use"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Agreetermsofusebyidresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/challenges/submissions/{challengeId}/mySubmissions": {
      "get": {
        "description": "",
        "tags": [
          "Terms Of Use API"
        ],
        "operationId": "Get_My Submissions_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "challengeId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MySubmissionsresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/search?handle={handle}&pageIndex={pageIndex}&pageSize={pageSize}&caseSensitive={caseSensitive}": {
      "get": {
        "description": "",
        "tags": [
          "Members API"
        ],
        "operationId": "Search members by handle_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The handle string, it can contain \"%\" and \"_\"."
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The page index, default value is 1."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The page size, default value is 10."
          },
          {
            "name": "caseSensitive",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The case sensitive flag."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Searchmembersbyhandleresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/validateEmail?email={email}": {
      "get": {
        "description": "",
        "tags": [
          "Members API"
        ],
        "operationId": "Get_Check Email Availability_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The email string."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CheckEmailAvailabilityresponse"
            }
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/copilots/{handle}/statistics/develop?track={track}": {
      "get": {
        "description": "",
        "tags": [
          "Members API"
        ],
        "operationId": "Get_Software Copilot Statistics_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "handle",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Member Handle"
          },
          {
            "name": "track",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The track name"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/terms/docusign/viewURL": {
      "post": {
        "description": "- Only when jwt passed can we use this api",
        "tags": [
          "Members API"
        ],
        "operationId": "Create_Docusign Recipient View URL_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": string,
            "description": "The template id"
          },
          {
            "name": "tabs",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The default values to set for the tabs. Double pipe delimited. Multiple such parameters can be sent."
          },
          {
            "name": "returnUrl",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The return url."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocusignRecipientViewURLresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/users/tops/{trackType}?pageIndex={pageIndex}&pageSize={pageSize}": {
      "get": {
        "description": "",
        "tags": [
          "Members API"
        ],
        "operationId": "Get_Top Track Members_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "trackType",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Track Type, support \"design\", \"develop\", \"data\"."
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null. Default 1."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set. Default 50."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/TopTrackMembersresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/download/document/{docid}?challengeId={challengeId}": {
      "get": {
        "description": "",
        "tags": [
          "Download API"
        ],
        "operationId": "Get_Download Documents API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "docid",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The document id."
          },
          {
            "name": "challengeId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/design/download/{submissionId}?submissionType={submissionType}": {
      "get": {
        "description": "",
        "tags": [
          "Download API"
        ],
        "operationId": "Get_Download Design Submissions API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "submission",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The submission id."
          },
          {
            "name": "submissionType",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The submission type should be preview or original"
          },
          {
            "name": "submissionImageTypeId",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The image type id, 25, 26, 28, 29, 30, 31 for tiny, thumb, small, medium and full"
          },
          {
            "name": "submissionFileIndex",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "THe file index"
          },
          {
            "name": "submissionId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/develop/download/{submissionId}": {
      "get": {
        "description": "",
        "tags": [
          "Download API"
        ],
        "operationId": "Get_Download Develop Submissions API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "submission",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The submission id."
          },
          {
            "name": "username",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The submission id."
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The submission id."
          },
          {
            "name": "submissionId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/payments/preference": {
      "get": {
        "description": "",
        "tags": [
          "Payments API"
        ],
        "operationId": "Get_Payment Preference_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PaymentPreferenceresponse"
            }
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      },
      "post": {
        "description": "",
        "tags": [
          "Payments API"
        ],
        "operationId": "Create_Payment Preference_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paymentMethod",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Payment Method: PayPal, Western Union, Payoneer"
          },
          {
            "name": "paypalAccountEmail",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Email address of PayPal account"
          },
          {
            "name": "paymentAccrualAmount",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "Accrual amount to be paid"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PaymentPreferenceresponse98"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/payments?type={type}&status={status}&pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}": {
      "get": {
        "description": "",
        "tags": [
          "Payments API"
        ],
        "operationId": "Get_Payment List_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Payment Status: Paid, Owed, Cancelled, Entered into payment system, etc.."
          },
          {
            "name": "type",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Payment Type: Contest Payment, Review Payment, Copilot Payment, etc.."
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The page index of the returned resources. 1-based. It can be null. The default value will be 1."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The page size of the returned resources. 1-based. It can be null. The default value will be 10."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null. The default value will be 'createDate'."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'. The default value will be 'asc'."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/PaymentListresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/terms/docusignCallback": {
      "post": {
        "description": "",
        "tags": [
          "Payments API"
        ],
        "operationId": "Create_Docusign Callback_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envelopeStatus",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The status of the envelope"
          },
          {
            "name": "envelopeId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": string,
            "description": "The envelope to process"
          },
          {
            "name": "tabs",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "}]) ... The tab values. Can be empty"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DocusignCallbackresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/auth0/callback": {
      "get": {
        "description": "",
        "tags": [
          "Payments API"
        ],
        "operationId": "Get_Auth0 Callback API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The access code."
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The redirect url."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/contests": {
      "get": {
        "description": "",
        "tags": [
          "SRM Contests"
        ],
        "operationId": "List all Contests_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ListallContestsresponse"
              }
            }
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      },
      "post": {
        "description": "",
        "tags": [
          "SRM Contests"
        ],
        "operationId": "Create New Contest_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The contest name."
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The contest start date."
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The contest end date."
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The contest status."
          },
          {
            "name": "groupId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The group id."
          },
          {
            "name": "adText",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The ad text."
          },
          {
            "name": "adStart",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The ad start."
          },
          {
            "name": "adEnd",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The ad end."
          },
          {
            "name": "adTask",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The ad task."
          },
          {
            "name": "adCommand",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The ad command."
          },
          {
            "name": "activateMenu",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The activate menu flag."
          },
          {
            "name": "seasonId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The season id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateNewContestresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/contests/{id}": {
      "put": {
        "description": "",
        "tags": [
          "SRM Contests"
        ],
        "operationId": "Modify Contest_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of the contest to be modified."
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The new contest name."
          },
          {
            "name": "contestId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The new contest id."
          },
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The new contest start date."
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The new contest end date."
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The new contest status."
          },
          {
            "name": "groupId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The new group id."
          },
          {
            "name": "adText",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The new ad text."
          },
          {
            "name": "adStart",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The new ad start."
          },
          {
            "name": "adEnd",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The new ad end."
          },
          {
            "name": "adTask",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The new ad task."
          },
          {
            "name": "adCommand",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The new ad command."
          },
          {
            "name": "activateMenu",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The new activate menu flag."
          },
          {
            "name": "seasonId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The new season id."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifyContestresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/rounds/:roundId/survey": {
      "post": {
        "description": "",
        "tags": [
          "SRM Contests"
        ],
        "operationId": "Create_Set Survey API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of the round to get."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SetSurveyAPIresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/rounds/:roundId/questions": {
      "get": {
        "description": "",
        "tags": [
          "SRM Contests"
        ],
        "operationId": "Get Round Questions API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of the round to get."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetRoundQuestionsAPIresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      },
      "post": {
        "description": "",
        "tags": [
          "SRM Contests"
        ],
        "operationId": "Add Round Question API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of the round to set."
          },
          {
            "name": "text",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The text parameter."
          },
          {
            "name": "styleId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The id of the style to set."
          },
          {
            "name": "typeId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The id of the type to set."
          },
          {
            "name": "statusId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The id of the status to set."
          },
          {
            "name": "keyword",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The keyword parameter."
          },
          {
            "name": "isRequired",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The required flag."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AddRoundQuestionAPIresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/rounds/:questionId/questions": {
      "put": {
        "description": "",
        "tags": [
          "SRM Contests"
        ],
        "operationId": "Modify Round Question API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "questionId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of the question to set."
          },
          {
            "name": "text",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The text parameter."
          },
          {
            "name": "styleId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The id of the style to set."
          },
          {
            "name": "typeId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The id of the type to set."
          },
          {
            "name": "statusId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The id of the status to set."
          },
          {
            "name": "keyword",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The keyword parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifyRoundQuestionAPIresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/rounds/:questionId/question": {
      "delete": {
        "description": "",
        "tags": [
          "SRM Contests"
        ],
        "operationId": "Delete Round Question API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "questionId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of the question to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DeleteRoundQuestionAPIresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/rounds/:questionId/answers": {
      "get": {
        "description": "",
        "tags": [
          "SRM Contests"
        ],
        "operationId": "Get Round Question Answers API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "questionId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of the question to get."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetRoundQuestionAnswersAPIresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/questions/:questionId/answers": {
      "post": {
        "description": "",
        "tags": [
          "SRM Contests"
        ],
        "operationId": "Add Round Question Answer API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "questionId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of the question to set."
          },
          {
            "name": "text",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The text parameter."
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The sort order to set."
          },
          {
            "name": "correct",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The correct parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AddRoundQuestionAnswerAPIresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/problems": {
      "get": {
        "description": "",
        "tags": [
          "SRM Contests"
        ],
        "operationId": "List Problems API_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ListProblemsAPIresponse"
            }
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/rounds/:roundId/problems": {
      "get": {
        "description": "",
        "tags": [
          "SRM Contests"
        ],
        "operationId": "List Round Problems API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of the round to get."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ListRoundProblemsAPIresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/rounds/:roundId/components": {
      "get": {
        "description": "",
        "tags": [
          "SRM Contests"
        ],
        "operationId": "List Round Problem Components API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of the round to get."
          },
          {
            "name": "problemId",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of the problem to get."
          },
          {
            "name": "divisionId",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of the division to get."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ListRoundProblemComponentsAPIresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      },
      "post": {
        "description": "",
        "tags": [
          "Deprecated APIs"
        ],
        "operationId": "Create_Set Round Components API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The id of the round to set."
          },
          {
            "name": "components",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The components parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SetRoundComponentsAPIresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/rounds/{roundId}/roomAssignment": {
      "post": {
        "description": "",
        "tags": [
          "SRM Round Configuration APIs"
        ],
        "operationId": "Create_Set Round Room Assignment_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The round id for the room to be assigned"
          },
          {
            "name": "isByDivision",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The isByDivision flag"
          },
          {
            "name": "isByRegion",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The isByRegion flag"
          },
          {
            "name": "isFinal",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The isFinal flag"
          },
          {
            "name": "type",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The algorithm seeding"
          },
          {
            "name": "seasonId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The number of coders per room"
          },
          {
            "name": "p",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The p value"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SetRoundRoomAssignmentresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/rounds/{roundId}/languages": {
      "post": {
        "description": "",
        "tags": [
          "SRM Round Configuration APIs"
        ],
        "operationId": "Create_Set Round Room Language_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The round id"
          },
          {
            "name": "languages",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The array of language ids to be assigened to the room"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SetRoundRoomLanguageresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/rounds/{roundId}/events": {
      "post": {
        "description": "",
        "tags": [
          "SRM Round Configuration APIs"
        ],
        "operationId": "Create_Set Round Events_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The round id"
          },
          {
            "name": "eventId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The event id"
          },
          {
            "name": "eventName",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The name of the event"
          },
          {
            "name": "registrationUrl",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The registration url for the event"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/rounds/{roundId}/segments": {
      "post": {
        "description": "",
        "tags": [
          "SRM Round Configuration APIs"
        ],
        "operationId": "Create_Set Round Segments_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roundId",
            "in": "path",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The round id."
          },
          {
            "name": "registrationStart",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The registration start time."
          },
          {
            "name": "registrationLength",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The registration duration minutes."
          },
          {
            "name": "codingStart",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The coding start time."
          },
          {
            "name": "codingLength",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The coding duration minutes."
          },
          {
            "name": "intermissionLength",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The intermission duration minutes."
          },
          {
            "name": "challengeLength",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The challenge duration minutes."
          },
          {
            "name": "registrationStatus",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The registration status for the round, max length 1."
          },
          {
            "name": "codingStatus",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The coding status for the round, max length 1."
          },
          {
            "name": "intermissionStatus",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The intermission status for the round, max length 1."
          },
          {
            "name": "challengeStatus",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The challenge status for the round, max length 1."
          },
          {
            "name": "systemTestStatus",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "The system test status for the round, max length 1."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SetRoundSegmentsresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/roundAccess": {
      "get": {
        "description": "",
        "tags": [
          "SRM Round Configuration APIs"
        ],
        "operationId": "Load Round Access_",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/LoadRoundAccessresponse"
            }
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/develop/challenges?listType={listType}&pageIndex={pageIndex}&pageSize={pageSize}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}": {
      "get": {
        "description": "",
        "tags": [
          "Deprecated APIs"
        ],
        "operationId": "Search Software Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "listType",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The type of challenges to search. It can only be 'ACTIVE', 'OPEN', 'PAST' or 'UPCOMING'. If it's null, 'Open' will be used."
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          },
          {
            "name": "communityId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The community id."
          },
          {
            "name": "submissionEndFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date from value."
          },
          {
            "name": "submissionEndTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date to value."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SearchSoftwareChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/design/challenges?listType={listType}&pageSize={pageSize}&pageIndex={pageIndex}&sortColumn={sortColumn}&sortOrder={sortOrder}&communityId={communityId}&submissionEndFrom={submissionEndFrom}&submissionEndTo={submissionEndTo}": {
      "get": {
        "description": "",
        "tags": [
          "Deprecated APIs"
        ],
        "operationId": "Search Studio Challenges_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "listType",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The type of challenges to search. It can only be 'ACTIVE', 'OPEN', 'PAST' or 'UPCOMING'. If it's null, 'Open' will be used."
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Key of the filter key-value pair"
          },
          {
            "name": "value",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "Value of the filter key-value pair"
          },
          {
            "name": "pageIndex",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null."
          },
          {
            "name": "sortOrder",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sorting order, can be null. If it's set, it can only be 'asc' or 'desc'."
          },
          {
            "name": "communityId",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The community id."
          },
          {
            "name": "submissionEndFrom",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date from value."
          },
          {
            "name": "submissionEndTo",
            "in": "path",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "submission end date to value."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SearchStudioChallengesresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "406": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/data/srm/answer/:answerId": {
      "put": {
        "description": "",
        "tags": [
          "Round Question Answers APIs"
        ],
        "operationId": "Modify Round Question Answer API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "answerId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "integer",
            "format": "int32",
            "description": "answer ID"
          },
          {
            "name": "text",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "integer",
            "format": "int32",
            "description": "answer text"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "integer",
            "format": "int32",
            "description": "the sorting order"
          },
          {
            "name": "correct",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "boolean",
            "description": "flag indicating whether answer is correct or not."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ModifyRoundQuestionAnswerAPIresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "404": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      },
      "delete": {
        "description": "",
        "tags": [
          "Round Question Answers APIs"
        ],
        "operationId": "Delete Round Question Answer API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "answerId",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "integer",
            "format": "int32",
            "description": "deleting answer's id"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DeleteRoundQuestionAnswerAPIresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    },
    "/src2image": {
      "get": {
        "description": "",
        "tags": [
          "Source Code Image Generation APIs"
        ],
        "operationId": "Get Rounds_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageIndex",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The paging number, 1-based, -1 if no paging. It can be null."
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "number",
            "format": "double",
            "description": "The max number of the results, should be set if pageIndex is set."
          },
          {
            "name": "sortColumn",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The column name to sort, can be null. It should be one of name,registrationPhaseStartTime, registrationPhaseEndTime, codingPhaseStartTime, codingPhaseEndTime, intermissionPhaseStartTime, intermissionPhaseEndTime, challengePhaseStartTime, challengePhaseEndTime, systemTestPhaseStartTime, systemTestPhaseEndTime, roomAssignmentPhaseStartTime, roomAssignmentPhaseEndTime, moderatedChatPhaseStartTime, moderatedChatPhaseEndTime."
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The sort order, can be null. It should be one of desc or asc."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The name filter, can be null. It should be encoded in uri format. It's case insensitive and it could be only part of name to filter."
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The type filter, can be null. It should be encoded in uri format. It's case insensitive. It should be values in round_type_lu table description field. It could use ',' char to connect more than 1 value."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "The status filter, can be null. It's case insensitive. It should be one of active / past / draft. It could use ',' char to connect more than 1 value."
          },
          {
            "name": "registrationPhaseStartTimeFrom",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "registrationPhaseStartTimeTo",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "registrationPhaseEndTimeFrom",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "registrationPhaseEndTimeTo",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "codingPhaseStartTimeFrom",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "codingPhaseStartTimeTo",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "codingPhaseEndTimeFrom",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "codingPhaseEndTimeTo",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "intermissionPhaseStartTimeFrom",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "intermissionPhaseStartTimeTo",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "intermissionPhaseEndTimeFrom",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "intermissionPhaseEndTimeTo",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "challengePhaseStartTimeFrom",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "challengePhaseStartTimeTo",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "challengePhaseEndTimeFrom",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "challengePhaseEndTimeTo",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "systemTestPhaseStartTimeFrom",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "systemTestPhaseStartTimeTo",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "systemTestPhaseEndTimeFrom",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "systemTestPhaseEndTimeTo",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "roomAssignmentPhaseStartTimeFrom",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "roomAssignmentPhaseStartTimeTo",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "roomAssignmentPhaseEndTimeFrom",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "roomAssignmentPhaseEndTimeTo",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "moderatedChatPhaseStartTimeFrom",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "moderatedChatPhaseStartTimeTo",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "moderatedChatPhaseEndTimeFrom",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          },
          {
            "name": "moderatedChatPhaseEndTimeTo",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetRoundsresponse"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "401": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "403": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      },
      "post": {
        "description": "",
        "tags": [
          "Source Code Image Generation APIs"
        ],
        "operationId": "Create_Source Code Image Generation API_",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "the code value to convert"
          },
          {
            "name": "lang",
            "in": "query",
            "required": true,
            "x-is-map": false,
            "type": "string",
            "description": "the code's language name, it should be one of [\"1c\",\"actionscript\",\"apache\",\"applescript\",\"xml\",\"asciidoc\",\"autohotkey\",\"avrasm\",\"axapta\",\"bash\",\"brainfuck\",\"capnproto\",\"clojure\",\"cmake\",\"coffeescript\",\"cpp\",\"cs\",\"css\",\"d\",\"markdown\",\"dart\",\"delphi\",\"diff\",\"django\",\"dos\",\"dust\",\"elixir\",\"ruby\",\"erb\",\"erlang-repl\",\"erlang\",\"fix\",\"fsharp\",\"gcode\",\"gherkin\",\"glsl\",\"go\",\"gradle\",\"groovy\",\"haml\",\"handlebars\",\"haskell\",\"haxe\",\"http\",\"ini\",\"java\",\"javascript\",\"json\",\"lasso\",\"less\",\"lisp\",\"livecodeserver\",\"livescript\",\"lua\",\"makefile\",\"mathematica\",\"matlab\",\"mel\",\"mizar\",\"monkey\",\"nginx\",\"nimrod\",\"nix\",\"nsis\",\"objectivec\",\"ocaml\",\"oxygene\",\"parser3\",\"perl\",\"php\",\"powershell\",\"processing\",\"profile\",\"protobuf\",\"puppet\",\"python\",\"q\",\"r\",\"rib\",\"rsl\",\"ruleslanguage\",\"rust\",\"scala\",\"scheme\",\"scilab\",\"scss\",\"smalltalk\",\"sql\",\"stylus\",\"swift\",\"tcl\",\"tex\",\"thrift\",\"twig\",\"typescript\",\"vala\",\"vbnet\",\"vbscript\",\"vbscript-html\",\"vhdl\",\"vim\",\"x86asm\",\"xl\"]"
          },
          {
            "name": "style",
            "in": "query",
            "required": false,
            "x-is-map": false,
            "type": "string",
            "description": "the code's format style, it should be one of ['arta', 'ascetic', 'atelier-dune.dark', 'atelier-dune.light', 'atelier-forest.dark', 'atelier-forest.light', 'atelier-heath.dark', 'atelier-heath.light', 'atelier-lakeside.dark', 'atelier-lakeside.light', 'atelier-seaside.dark', 'atelier-seaside.light', 'brown_paper', 'codepen-embed', 'color-brewer', 'dark', 'default', 'docco', 'far', 'foundation', 'github', 'googlecode', 'hybrid', 'idea', 'ir_black', 'kimbie.dark', 'kimbie.light', 'magula', 'mono-blue', 'monokai', 'monokai_sublime', 'obsidian', 'paraiso.dark', 'paraiso.light', 'pojoaque', 'railscasts', 'rainbow', 'school_book', 'solarized_dark', 'solarized_light', 'sunburst', 'tomorrow-night-blue', 'tomorrow-night-bright', 'tomorrow-night-eighties', 'tomorrow-night', 'tomorrow', 'vs', 'xcode', 'zenburn']"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "default": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          },
          "503": {
            "description": "Unexpected error in API call. See HTTP response body for details."
          }
        }
      }
    }
  },
  "definitions": {
    "CreateJWTTokenresponse": {
      "title": "Create JWT Token response",
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "required": [
        "token"
      ]
    },
    "RefreshJWTTokenresponse": {
      "title": "Refresh JWT Token response",
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "required": [
        "token"
      ]
    },
    "ValidateSSOCookieresponse": {
      "title": "Validate SSO Cookie response",
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "userId"
      ]
    },
    "ChallengeCostsresponse": {
      "title": "Challenge Costs response",
      "type": "object",
      "properties": {
        "history": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "history"
      ]
    },
    "ClientChallengeCostsresponse": {
      "title": "Client Challenge Costs response",
      "type": "object",
      "properties": {
        "history": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "history"
      ]
    },
    "ClientActiveChallengeCostsresponse": {
      "title": "Client Active Challenge Costs response",
      "type": "object",
      "properties": {
        "active": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "active"
      ]
    },
    "TrackStatisticsresponse": {
      "title": "Track Statistics response",
      "type": "object",
      "properties": {
        "numberOfRunningChallenges": {
          "type": "integer",
          "format": "int32"
        },
        "totalPrizeOfRunningChallenges": {
          "type": "integer",
          "format": "int32"
        },
        "totalPrizeInGivenTime": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfChallengesInGivenTime": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfRegisteredUsers": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfActiveUsers": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "numberOfRunningChallenges",
        "totalPrizeOfRunningChallenges",
        "totalPrizeInGivenTime",
        "numberOfChallengesInGivenTime",
        "numberOfRegisteredUsers",
        "numberOfActiveUsers"
      ]
    },
    "GetActivitySummaryresponse": {
      "title": "Get Activity Summary response",
      "type": "object",
      "properties": {
        "activeContestsCount": {
          "type": "integer",
          "format": "int32"
        },
        "activeMembersCount": {
          "type": "integer",
          "format": "int32"
        },
        "activeProjectsCount": {
          "type": "integer",
          "format": "int32"
        },
        "completedProjectsCount": {
          "type": "integer",
          "format": "int32"
        },
        "prizePurse": {
          "type": "string"
        }
      },
      "required": [
        "activeContestsCount",
        "activeMembersCount",
        "activeProjectsCount",
        "completedProjectsCount",
        "prizePurse"
      ]
    },
    "CreateCustomerresponse": {
      "title": "Create Customer response",
      "type": "object",
      "properties": {
        "clientId": {
          "type": "string"
        }
      },
      "required": [
        "clientId"
      ]
    },
    "CreateBillingresponse": {
      "title": "Create Billing response",
      "type": "object",
      "properties": {
        "billingAccountId": {
          "type": "string"
        }
      },
      "required": [
        "billingAccountId"
      ]
    },
    "UpdateBillingAccountPermissionresponse": {
      "title": "Update Billing Account Permission response",
      "type": "object",
      "properties": {
        "success": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "failed": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "success",
        "failed"
      ]
    },
    "GetLeaderboardresponse": {
      "title": "Get Leaderboard response",
      "type": "object",
      "properties": {
        "entries": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        },
        "scoreType": {
          "type": "string"
        },
        "scoreLabel": {
          "type": "string"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "entries",
        "description",
        "scoreType",
        "scoreLabel",
        "result"
      ]
    },
    "GetChallengeDetailresponse": {
      "title": "Get Challenge Detail response",
      "type": "object",
      "properties": {
        "challengeType": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "challengeName": {
          "type": "string"
        },
        "challengeId": {
          "type": "integer",
          "format": "int32"
        },
        "projectId": {
          "type": "integer",
          "format": "int32"
        },
        "forumId": {
          "type": "string"
        },
        "detailedRequirements": {
          "type": "string"
        },
        "finalSubmissionGuidelines": {
          "type": "string"
        },
        "screeningScorecardId": {
          "type": "string"
        },
        "reviewScorecardId": {
          "type": "string"
        },
        "cmcTaskId": {
          "type": "string"
        },
        "numberOfCheckpointsPrizes": {
          "type": "integer",
          "format": "int32"
        },
        "topCheckPointPrize": {
          "type": "string"
        },
        "postingDate": {
          "type": "string"
        },
        "registrationEndDate": {
          "type": "string"
        },
        "checkpointSubmissionEndDate": {
          "type": "string"
        },
        "submissionEndDate": {
          "type": "string"
        },
        "appealsEndDate": {
          "type": "string"
        },
        "finalFixEndDate": {
          "type": "string"
        },
        "digitalRunPoints": {
          "type": "integer",
          "format": "int32"
        },
        "reliabilityBonus": {
          "type": "integer",
          "format": "int32"
        },
        "challengeCommunity": {
          "type": "string"
        },
        "directUrl": {
          "type": "string"
        },
        "technology": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "prize": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "generalCheckpointFeedback": {
          "type": "string"
        },
        "Documents": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "numberOfRegistrants": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfSubmissions": {
          "type": "integer",
          "format": "int32"
        },
        "platforms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "event": {
          "type": "object"
        }
      },
      "required": [
        "challengeType",
        "type",
        "challengeName",
        "challengeId",
        "projectId",
        "forumId",
        "detailedRequirements",
        "finalSubmissionGuidelines",
        "screeningScorecardId",
        "reviewScorecardId",
        "cmcTaskId",
        "numberOfCheckpointsPrizes",
        "topCheckPointPrize",
        "postingDate",
        "registrationEndDate",
        "checkpointSubmissionEndDate",
        "submissionEndDate",
        "appealsEndDate",
        "finalFixEndDate",
        "digitalRunPoints",
        "reliabilityBonus",
        "challengeCommunity",
        "directUrl",
        "technology",
        "prize",
        "generalCheckpointFeedback",
        "Documents",
        "numberOfRegistrants",
        "numberOfSubmissions",
        "platforms",
        "event"
      ]
    },
    "GetChallengeRegistrantsresponse": {
      "title": "Get Challenge Registrants response",
      "type": "object",
      "properties": {
        "registrants": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "registrants"
      ]
    },
    "GetChallengeSubmissionsresponse": {
      "title": "Get Challenge Submissions response",
      "type": "object",
      "properties": {
        "submissions": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "submissions"
      ]
    },
    "GetChallengePhasesresponse": {
      "title": "Get Challenge Phases response",
      "type": "object",
      "properties": {
        "currentPhaseEndDate": {
          "type": "string"
        },
        "currentStatus": {
          "type": "string"
        },
        "currentPhaseName": {
          "type": "string"
        },
        "currentPhaseRemainingTime": {
          "type": "integer",
          "format": "int32"
        },
        "phases": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "currentPhaseEndDate",
        "currentStatus",
        "currentPhaseName",
        "currentPhaseRemainingTime",
        "phases"
      ]
    },
    "Createanewuserrequest": {
      "title": "Create a new user request",
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "regSource": {
          "type": "string"
        },
        "utm_source": {
          "type": "string"
        },
        "utm_medium": {
          "type": "string"
        },
        "utm_campaign": {
          "type": "string"
        }
      },
      "required": [
        "firstname",
        "lastname",
        "handle",
        "country",
        "email",
        "password",
        "regSource",
        "utm_source",
        "utm_medium",
        "utm_campaign"
      ]
    },
    "Createanewuserresponse": {
      "title": "Create a new user response",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value",
        "description"
      ]
    },
    "Users": {
      "title": "Users",
      "type": "object",
      "properties": {
        "country": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "regSource": {
          "type": "string"
        },
        "utm_campaign": {
          "type": "string"
        },
        "utm_medium": {
          "type": "string"
        },
        "utm_source": {
          "type": "string"
        }
      },
      "required": [
        "country",
        "email",
        "firstname",
        "handle",
        "lastname",
        "password",
        "regSource",
        "utm_campaign",
        "utm_medium",
        "utm_source"
      ]
    },
    "Createanewuserviasocialloginrequest": {
      "title": "Create a new user via social login request",
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "socialProvider": {
          "type": "string"
        },
        "socialUserId": {
          "type": "string"
        },
        "socialUserName": {
          "type": "string"
        },
        "socialEmail": {
          "type": "string"
        },
        "socialEmailVerified": {
          "type": "string"
        },
        "regSource": {
          "type": "string"
        }
      },
      "required": [
        "firstname",
        "lastname",
        "handle",
        "country",
        "email",
        "socialProvider",
        "socialUserId",
        "socialUserName",
        "socialEmail",
        "socialEmailVerified",
        "regSource"
      ]
    },
    "Createanewuserviasocialloginresponse": {
      "title": "Create a new user via social login response",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value",
        "description"
      ]
    },
    "PublicProfileresponse": {
      "title": "Public Profile response",
      "type": "object",
      "properties": {
        "handle": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "memberSince": {
          "type": "string"
        },
        "overallEarning": {
          "type": "integer",
          "format": "int32"
        },
        "quote": {
          "type": "string"
        },
        "ratingsSummary": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "photoLink": {
          "type": "string"
        },
        "isCopilot": {
          "type": "object"
        },
        "isPM": {
          "type": "boolean"
        },
        "Achievements": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "handle",
        "country",
        "memberSince",
        "overallEarning",
        "quote",
        "ratingsSummary",
        "photoLink",
        "isCopilot",
        "isPM",
        "Achievements"
      ]
    },
    "MyProfileresponse": {
      "title": "My Profile response",
      "type": "object",
      "properties": {
        "handle": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "memberSince": {
          "type": "string"
        },
        "overallEarning": {
          "type": "integer",
          "format": "int32"
        },
        "quote": {
          "type": "string"
        },
        "ratingsSummary": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "photoLink": {
          "type": "string"
        },
        "isCopilot": {
          "type": "object"
        },
        "isPM": {
          "type": "boolean"
        },
        "Achievements": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "emails": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "age": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "shirt_size": {
          "type": "string"
        },
        "privacy": {
          "type": "object"
        },
        "emailNotification": {
          "type": "object"
        },
        "demographic": {
          "type": "object"
        }
      },
      "required": [
        "handle",
        "country",
        "memberSince",
        "overallEarning",
        "quote",
        "ratingsSummary",
        "photoLink",
        "isCopilot",
        "isPM",
        "Achievements",
        "emails",
        "name",
        "address",
        "age",
        "gender",
        "shirt_size",
        "privacy",
        "emailNotification",
        "demographic"
      ]
    },
    "MyProfileresponse24": {
      "title": "My Profile response24",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "GetUserChallengesresponse": {
      "title": "Get User Challenges response",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "data",
        "pageIndex",
        "pageSize",
        "total"
      ]
    },
    "SearchMyChallengesresponse": {
      "title": "Search My Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "SearchMyChallengesresponse28": {
      "title": "Search My Challenges response28",
      "type": "object",
      "properties": {
        "uid": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "required": [
        "uid",
        "handle",
        "email"
      ]
    },
    "GetUserAlgoChallengesresponse": {
      "title": "Get User Algo Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "GetUserMarathonMatchesInformationresponse": {
      "title": "Get User Marathon Matches Information response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "ValidateHandleresponse": {
      "title": "Validate Handle response",
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      },
      "required": [
        "valid"
      ]
    },
    "ValidateHandleresponse32": {
      "title": "Validate Handle response32",
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean"
        }
      },
      "required": [
        "available"
      ]
    },
    "GenerateResetTokenresponse": {
      "title": "Generate Reset Token response",
      "type": "object",
      "properties": {
        "successful": {
          "type": "string"
        }
      },
      "required": [
        "successful"
      ]
    },
    "ResetPasswordresponse": {
      "title": "Reset Password response",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        }
      },
      "required": [
        "description"
      ]
    },
    "UpdatePasswordresponse": {
      "title": "Update Password response",
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        }
      },
      "required": [
        "description"
      ]
    },
    "ActivateUserresponse": {
      "title": "Activate User response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "UploadMemberPhotoresponse": {
      "title": "Upload Member Photo response",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "GetReviewOpportunitiesresponse": {
      "title": "Get Review Opportunities response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "GetReviewOpportunityInformationresponse": {
      "title": "Get Review Opportunity Information response",
      "type": "object",
      "properties": {
        "challengeName": {
          "type": "string"
        },
        "challengeType": {
          "type": "string"
        },
        "challengeId": {
          "type": "integer",
          "format": "int32"
        },
        "phases": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "positions": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "applications": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "challengeName",
        "challengeType",
        "challengeId",
        "phases",
        "positions",
        "applications"
      ]
    },
    "ApplyDevelopReviewOpportunityInformationresponse": {
      "title": "Apply Develop Review Opportunity Information response",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "ApplyDesignReviewOpportunityresponse": {
      "title": "Apply Design Review Opportunity response",
      "type": "object",
      "properties": {
        "result": {
          "type": "string"
        }
      },
      "required": [
        "result"
      ]
    },
    "Listreviewersofcurrentchallengetyperesponse": {
      "title": "List reviewers of current challenge type response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "data"
      ]
    },
    "SoftwareMemberRatingHistoryandDistributionresponse": {
      "title": "Software Member Rating History and Distribution response",
      "type": "object",
      "properties": {
        "history": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "distribution": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "history",
        "distribution"
      ]
    },
    "Listallchallengetypesresponse": {
      "title": "List all challenge types response",
      "type": "object",
      "properties": {
        "contestCategoryId": {
          "type": "integer",
          "format": "int32"
        },
        "contestTypeId": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "contestCategoryId",
        "contestTypeId",
        "description",
        "name"
      ]
    },
    "SearchActiveSoftwareChallengesresponse": {
      "title": "Search Active Software Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "SearchOpenSoftwareChallengesresponse": {
      "title": "Search Open Software Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "SearchUpcomingSoftwareChallengesresponse": {
      "title": "Search Upcoming Software Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "GetSoftwareChallengeDetailresponse": {
      "title": "Get Software Challenge Detail response",
      "type": "object",
      "properties": {
        "challengeType": {
          "type": "string"
        },
        "challengeName": {
          "type": "string"
        },
        "challengeId": {
          "type": "integer",
          "format": "int32"
        },
        "projectId": {
          "type": "integer",
          "format": "int32"
        },
        "forumId": {
          "type": "string"
        },
        "detailedRequirements": {
          "type": "string"
        },
        "finalSubmissionGuidelines": {
          "type": "string"
        },
        "screeningScorecardId": {
          "type": "string"
        },
        "reviewScorecardId": {
          "type": "string"
        },
        "cmcTaskId": {
          "type": "string"
        },
        "numberOfCheckpointsPrizes": {
          "type": "integer",
          "format": "int32"
        },
        "topCheckPointPrize": {
          "type": "string"
        },
        "postingDate": {
          "type": "string"
        },
        "registrationEndDate": {
          "type": "string"
        },
        "checkpointSubmissionEndDate": {
          "type": "string"
        },
        "submissionEndDate": {
          "type": "string"
        },
        "appealsEndDate": {
          "type": "string"
        },
        "finalFixEndDate": {
          "type": "string"
        },
        "currentPhaseEndDate": {
          "type": "string"
        },
        "currentStatus": {
          "type": "string"
        },
        "currentPhaseName": {
          "type": "string"
        },
        "currentPhaseRemainingTime": {
          "type": "integer",
          "format": "int32"
        },
        "digitalRunPoints": {
          "type": "integer",
          "format": "int32"
        },
        "reliabilityBonus": {
          "type": "integer",
          "format": "int32"
        },
        "challengeCommunity": {
          "type": "string"
        },
        "directUrl": {
          "type": "string"
        },
        "technology": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "prize": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "registrants": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "generalCheckpointFeedback": {
          "type": "string"
        },
        "submissions": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "Documents": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "numberOfRegistrants": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfSubmissions": {
          "type": "integer",
          "format": "int32"
        },
        "platforms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phases": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "event": {
          "type": "object"
        }
      },
      "required": [
        "challengeType",
        "challengeName",
        "challengeId",
        "projectId",
        "forumId",
        "detailedRequirements",
        "finalSubmissionGuidelines",
        "screeningScorecardId",
        "reviewScorecardId",
        "cmcTaskId",
        "numberOfCheckpointsPrizes",
        "topCheckPointPrize",
        "postingDate",
        "registrationEndDate",
        "checkpointSubmissionEndDate",
        "submissionEndDate",
        "appealsEndDate",
        "finalFixEndDate",
        "currentPhaseEndDate",
        "currentStatus",
        "currentPhaseName",
        "currentPhaseRemainingTime",
        "digitalRunPoints",
        "reliabilityBonus",
        "challengeCommunity",
        "directUrl",
        "technology",
        "prize",
        "registrants",
        "generalCheckpointFeedback",
        "submissions",
        "Documents",
        "numberOfRegistrants",
        "numberOfSubmissions",
        "platforms",
        "phases",
        "event"
      ]
    },
    "GetSoftwareChallengeCheckpointDetailresponse": {
      "title": "Get Software Challenge Checkpoint Detail response",
      "type": "object",
      "properties": {
        "checkpointResults": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "general feedback": {
          "type": "string"
        }
      },
      "required": [
        "checkpointResults",
        "general feedback"
      ]
    },
    "Uploadasubmissionbyusingbase64encodingresponse": {
      "title": "Upload a submission by using base64 encoding response",
      "type": "object",
      "properties": {
        "submissionId": {
          "type": "integer",
          "format": "int32"
        },
        "uploadId": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "submissionId",
        "uploadId"
      ]
    },
    "Uploadasubmissionbyusingdirectfileuploadresponse": {
      "title": "Upload a submission by using direct file upload response",
      "type": "object",
      "properties": {
        "submissionId": {
          "type": "integer",
          "format": "int32"
        },
        "uploadId": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "submissionId",
        "uploadId"
      ]
    },
    "Uploadasubmissionresponse": {
      "title": "Upload a submission response",
      "type": "object",
      "properties": {
        "submissionId": {
          "type": "integer",
          "format": "int32"
        },
        "uploadId": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "submissionId",
        "uploadId"
      ]
    },
    "TopRankedMembersresponse": {
      "title": "Top Ranked Members response",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "data",
        "pageIndex",
        "pageSize",
        "total"
      ]
    },
    "SearchActiveStudioChallengesresponse": {
      "title": "Search Active Studio Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "SearchOpenStudioChallengesresponse": {
      "title": "Search Open Studio Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "SearchPastStudioChallengesresponse": {
      "title": "Search Past Studio Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "SearchUpcomingStudioChallengesresponse": {
      "title": "Search Upcoming Studio Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "GetStudioChallengeDetailresponse": {
      "title": "Get Studio Challenge Detail response",
      "type": "object",
      "properties": {
        "challengeType": {
          "type": "string"
        },
        "challengeName": {
          "type": "string"
        },
        "challengeId": {
          "type": "integer",
          "format": "int32"
        },
        "projectId": {
          "type": "integer",
          "format": "int32"
        },
        "forumId": {
          "type": "string"
        },
        "introduction": {
          "type": "string"
        },
        "round1Introduction": {
          "type": "string"
        },
        "round2Introduction": {
          "type": "string"
        },
        "roundOneDetails": {
          "type": "string"
        },
        "roundTwoDetails": {
          "type": "string"
        },
        "detailedRequirements": {
          "type": "string"
        },
        "screeningScorecardId": {
          "type": "string"
        },
        "reviewScorecardId": {
          "type": "string"
        },
        "cmcTaskId": {
          "type": "string"
        },
        "numberOfCheckpointsPrizes": {
          "type": "integer",
          "format": "int32"
        },
        "topCheckPointPrize": {
          "type": "string"
        },
        "postingDate": {
          "type": "string"
        },
        "registrationEndDate": {
          "type": "string"
        },
        "checkpointSubmissionEndDate": {
          "type": "string"
        },
        "submissionEndDate": {
          "type": "string"
        },
        "appealsEndDate": {
          "type": "string"
        },
        "finalFixEndDate": {
          "type": "string"
        },
        "submissionLimit": {
          "type": "string"
        },
        "sourceFileTypes": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "submissionsViewable": {
          "type": "string"
        },
        "reviewType": {
          "type": "string"
        },
        "downloads": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "currentPhaseEndDate": {
          "type": "string"
        },
        "currentStatus": {
          "type": "string"
        },
        "currentPhaseName": {
          "type": "string"
        },
        "currentPhaseRemainingTime": {
          "type": "integer",
          "format": "int32"
        },
        "digitalRunPoints": {
          "type": "integer",
          "format": "int32"
        },
        "challengeCommunity": {
          "type": "string"
        },
        "directUrl": {
          "type": "string"
        },
        "prize": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "generalCheckpointFeedback": {
          "type": "string"
        },
        "checkpoints": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "submissions": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "winners": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "Documents": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "phases": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "event": {
          "type": "object"
        }
      },
      "required": [
        "challengeType",
        "challengeName",
        "challengeId",
        "projectId",
        "forumId",
        "introduction",
        "round1Introduction",
        "round2Introduction",
        "roundOneDetails",
        "roundTwoDetails",
        "detailedRequirements",
        "screeningScorecardId",
        "reviewScorecardId",
        "cmcTaskId",
        "numberOfCheckpointsPrizes",
        "topCheckPointPrize",
        "postingDate",
        "registrationEndDate",
        "checkpointSubmissionEndDate",
        "submissionEndDate",
        "appealsEndDate",
        "finalFixEndDate",
        "submissionLimit",
        "sourceFileTypes",
        "submissionsViewable",
        "reviewType",
        "downloads",
        "currentPhaseEndDate",
        "currentStatus",
        "currentPhaseName",
        "currentPhaseRemainingTime",
        "digitalRunPoints",
        "challengeCommunity",
        "directUrl",
        "prize",
        "generalCheckpointFeedback",
        "checkpoints",
        "submissions",
        "winners",
        "Documents",
        "phases",
        "event"
      ]
    },
    "GetStudioChallengeCheckpointDetailresponse": {
      "title": "Get Studio Challenge Checkpoint Detail response",
      "type": "object",
      "properties": {
        "numberOfSubmissions": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfPassedScreeningSubmissions": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfPassedScreeningUniqueSubmitters": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfUniqueSubmitters": {
          "type": "integer",
          "format": "int32"
        },
        "checkpointResults": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "general feedback": {
          "type": "string"
        }
      },
      "required": [
        "numberOfSubmissions",
        "numberOfPassedScreeningSubmissions",
        "numberOfPassedScreeningUniqueSubmitters",
        "numberOfUniqueSubmitters",
        "checkpointResults",
        "general feedback"
      ]
    },
    "GetDesignReviewOpportunitiesresponse": {
      "title": "Get Design Review Opportunities response",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "data",
        "total",
        "pageIndex",
        "pageSize"
      ]
    },
    "GetReviewOpportunityInformationresponse61": {
      "title": "Get Review Opportunity Information response61",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "Phases": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "Positions": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "name",
        "Phases",
        "Positions"
      ]
    },
    "Platformsresponse": {
      "title": "Platforms response",
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "platforms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "count",
        "platforms"
      ]
    },
    "Technologiesresponse": {
      "title": "Technologies response",
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "technologies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "count",
        "technologies"
      ]
    },
    "Getalgorithmreviewopportunitydetailsresponse": {
      "title": "Get algorithm review opportunity details response",
      "type": "object",
      "properties": {
        "contestId": {
          "type": "integer",
          "format": "int32"
        },
        "contestName": {
          "type": "string"
        },
        "timeline": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "openPositions": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "reviewApplications": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "contestId",
        "contestName",
        "timeline",
        "openPositions",
        "reviewApplications"
      ]
    },
    "GetSRMRoundsForProblemresponse": {
      "title": "Get SRM Rounds For Problem response",
      "type": "object",
      "properties": {
        "rounds": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "rounds"
      ]
    },
    "ViewAlgorithmSRMChallengesresponse": {
      "title": "View Algorithm SRM Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "GetSRMPracticeProblemsresponse": {
      "title": "Get SRM Practice Problems response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "GetSRMScheduleresponse": {
      "title": "Get SRM Schedule response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "ViewAlgorithmMarathonChallengesresponse": {
      "title": "View Algorithm Marathon Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "ViewPastDataScienceChallengesresponse": {
      "title": "View Past Data Science Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "sortColumn": {
          "type": "string"
        },
        "sortOrder": {
          "type": "string"
        },
        "submissionEndFrom": {
          "type": "string"
        },
        "submissionEndTo": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "sortColumn",
        "sortOrder",
        "submissionEndFrom",
        "submissionEndTo",
        "data"
      ]
    },
    "ViewActiveDataScienceChallengesresponse": {
      "title": "View Active Data Science Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "submissionEndFrom": {
          "type": "string"
        },
        "submissionEndTo": {
          "type": "string"
        }
      },
      "required": [
        "total",
        "data",
        "submissionEndFrom",
        "submissionEndTo"
      ]
    },
    "ViewUpcomingDataScienceChallengesresponse": {
      "title": "View Upcoming Data Science Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "submissionEndFrom": {
          "type": "string"
        },
        "submissionEndTo": {
          "type": "string"
        }
      },
      "required": [
        "total",
        "data",
        "submissionEndFrom",
        "submissionEndTo"
      ]
    },
    "ListRoundforaContestresponse": {
      "title": "List Round for a Contest response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "data"
      ]
    },
    "DeletSRMContestRoundAPIresponse": {
      "title": "Delet SRM Contest Round API response",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "GetAlgorithmMarathonDetailresponse": {
      "title": "Get Algorithm Marathon Detail response",
      "type": "object",
      "properties": {
        "roundId": {
          "type": "integer",
          "format": "int32"
        },
        "fullName": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "numberOfRegistrants": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfSubmissions": {
          "type": "integer",
          "format": "int32"
        },
        "numberOfCompetitors": {
          "type": "integer",
          "format": "int32"
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "systemTestDate": {
          "type": "string"
        },
        "winnerHandle": {
          "type": "string"
        },
        "winnerScore": {
          "type": "number",
          "format": "double"
        },
        "currentProgress": {
          "type": "object"
        },
        "registrantsRatingSummary": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "roundId",
        "fullName",
        "shortName",
        "description",
        "numberOfRegistrants",
        "numberOfSubmissions",
        "numberOfCompetitors",
        "startDate",
        "endDate",
        "systemTestDate",
        "winnerHandle",
        "winnerScore",
        "currentProgress",
        "registrantsRatingSummary"
      ]
    },
    "GetAlgorithmSRMDetailresponse": {
      "title": "Get Algorithm SRM Detail response",
      "type": "object",
      "properties": {
        "roundId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "leaders": {
          "type": "object"
        },
        "problems": {
          "type": "object"
        }
      },
      "required": [
        "roundId",
        "name",
        "leaders",
        "problems"
      ]
    },
    "GetMarathonMatchChallengeRegInforesponse": {
      "title": "Get Marathon Match Challenge Reg Info response",
      "type": "object",
      "properties": {
        "term": {
          "type": "object"
        },
        "questions": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "term",
        "questions"
      ]
    },
    "RegisterMarathonMatchChallengeresponse": {
      "title": "Register Marathon Match Challenge response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "TopRankedMarathonMembersresponse": {
      "title": "Top Ranked Marathon Members response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "TopRankedSRMMembersresponse": {
      "title": "Top Ranked SRM Members response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "Listofcountriesresponse": {
      "title": "List of countries response",
      "type": "object",
      "properties": {
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "modifyDate": {
          "type": "string"
        },
        "participating": {
          "type": "integer",
          "format": "int32"
        },
        "default_taxform_id": {
          "type": "integer",
          "format": "int32"
        },
        "longitude": {
          "type": "number",
          "format": "double"
        },
        "latitude": {
          "type": "number",
          "format": "double"
        },
        "region": {
          "type": "string"
        }
      },
      "required": [
        "countryCode",
        "countryName",
        "modifyDate",
        "participating",
        "default_taxform_id",
        "longitude",
        "latitude",
        "region"
      ]
    },
    "Listoftimezonesresponse": {
      "title": "List of timezones response",
      "type": "object",
      "properties": {
        "timezoneCode": {
          "type": "string"
        },
        "timezoneName": {
          "type": "string"
        }
      },
      "required": [
        "timezoneCode",
        "timezoneName"
      ]
    },
    "Bugsresponse": {
      "title": "Bugs response",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "jiraUrl": {
          "type": "string"
        },
        "payment": {
          "type": "integer",
          "format": "int32"
        },
        "tcoPoints": {
          "type": "integer",
          "format": "int32"
        },
        "startDate": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "jiraUrl",
        "payment",
        "tcoPoints",
        "startDate"
      ]
    },
    "Registerforasoftware/studiochallengeresponse": {
      "title": "Register for a software/studio challenge response",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "Unregisterforasoftware/studiochallengeresponse": {
      "title": "Unregister for a software/studio challenge response",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "Viewtermsofusebyidresponse": {
      "title": "View terms of use by id response",
      "type": "object",
      "properties": {
        "agreeabilityType": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "termsOfUseId": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "agreeabilityType",
        "text",
        "title",
        "termsOfUseId",
        "url"
      ]
    },
    "Getroundtermsofusebyroundidresponse": {
      "title": "Get round terms of use by round id response",
      "type": "object",
      "properties": {
        "roundTermsContent": {
          "type": "string"
        }
      },
      "required": [
        "roundTermsContent"
      ]
    },
    "Agreetermsofusebyidresponse": {
      "title": "Agree terms of use by id response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "MySubmissionsresponse": {
      "title": "My Submissions response",
      "type": "object",
      "properties": {
        "submissions": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "submissions"
      ]
    },
    "Searchmembersbyhandleresponse": {
      "title": "Search members by handle response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "users"
      ]
    },
    "CheckEmailAvailabilityresponse": {
      "title": "Check Email Availability response",
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean"
        }
      },
      "required": [
        "available"
      ]
    },
    "DocusignRecipientViewURLresponse": {
      "title": "Docusign Recipient View URL response",
      "type": "object",
      "properties": {
        "recipientViewURL": {
          "type": "string"
        },
        "envelopeId": {
          "type": "string"
        }
      },
      "required": [
        "recipientViewURL",
        "envelopeId"
      ]
    },
    "TopTrackMembersresponse": {
      "title": "Top Track Members response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "PaymentPreferenceresponse": {
      "title": "Payment Preference response",
      "type": "object",
      "properties": {
        "paymentAccrualAmount": {
          "type": "integer",
          "format": "int32"
        },
        "paypalAccountEmail": {
          "type": "string"
        },
        "paymentMethod": {
          "type": "string"
        }
      },
      "required": [
        "paymentAccrualAmount",
        "paypalAccountEmail",
        "paymentMethod"
      ]
    },
    "PaymentPreferenceresponse98": {
      "title": "Payment Preference response98",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "PaymentListresponse": {
      "title": "Payment List response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "payments": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "summary": {
          "type": "object"
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "payments",
        "summary"
      ]
    },
    "DocusignCallbackresponse": {
      "title": "Docusign Callback response",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "ListallContestsresponse": {
      "title": "List all Contests response",
      "type": "object",
      "properties": {
        "contestId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "groupId": {
          "type": "integer",
          "format": "int32"
        },
        "adText": {
          "type": "string"
        },
        "adStart": {
          "type": "string"
        },
        "adEnd": {
          "type": "string"
        },
        "adTask": {
          "type": "string"
        },
        "adCommand": {
          "type": "string"
        },
        "activateMenu": {
          "type": "string"
        },
        "season": {
          "type": "string"
        }
      },
      "required": [
        "contestId",
        "name",
        "startDate",
        "endDate",
        "status",
        "groupId",
        "adText",
        "adStart",
        "adEnd",
        "adTask",
        "adCommand",
        "activateMenu",
        "season"
      ]
    },
    "CreateNewContestresponse": {
      "title": "Create New Contest response",
      "type": "object",
      "properties": {
        "contestId": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "contestId"
      ]
    },
    "ModifyContestresponse": {
      "title": "Modify Contest response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "SetSurveyAPIresponse": {
      "title": "Set Survey API response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "GetRoundQuestionsAPIresponse": {
      "title": "Get Round Questions API response",
      "type": "object",
      "properties": {
        "questions": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "questions"
      ]
    },
    "AddRoundQuestionAPIresponse": {
      "title": "Add Round Question API response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "ModifyRoundQuestionAPIresponse": {
      "title": "Modify Round Question API response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "DeleteRoundQuestionAPIresponse": {
      "title": "Delete Round Question API response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "GetRoundQuestionAnswersAPIresponse": {
      "title": "Get Round Question Answers API response",
      "type": "object",
      "properties": {
        "answers": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "answers"
      ]
    },
    "AddRoundQuestionAnswerAPIresponse": {
      "title": "Add Round Question Answer API response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "ListProblemsAPIresponse": {
      "title": "List Problems API response",
      "type": "object",
      "properties": {
        "problems": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "problems"
      ]
    },
    "ListRoundProblemsAPIresponse": {
      "title": "List Round Problems API response",
      "type": "object",
      "properties": {
        "assignedProblems": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "assignedProblems"
      ]
    },
    "ListRoundProblemComponentsAPIresponse": {
      "title": "List Round Problem Components API response",
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "components"
      ]
    },
    "SetRoundRoomAssignmentresponse": {
      "title": "Set Round Room Assignment response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "SetRoundRoomLanguageresponse": {
      "title": "Set Round Room Language response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "SetRoundSegmentsresponse": {
      "title": "Set Round Segments response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "LoadRoundAccessresponse": {
      "title": "Load Round Access response",
      "type": "object",
      "properties": {
        "accessibleRounds": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "accessibleRounds"
      ]
    },
    "SearchSoftwareChallengesresponse": {
      "title": "Search Software Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "SearchStudioChallengesresponse": {
      "title": "Search Studio Challenges response",
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      },
      "required": [
        "total",
        "pageIndex",
        "pageSize",
        "data"
      ]
    },
    "SetRoundComponentsAPIresponse": {
      "title": "Set Round Components API response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "SetRoundTermsAPIresponse": {
      "title": "Set Round Terms API response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "ModifyRoundQuestionAnswerAPIresponse": {
      "title": "Modify Round Question Answer API response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "DeleteRoundQuestionAnswerAPIresponse": {
      "title": "Delete Round Question Answer API response",
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "success"
      ]
    },
    "GetRoundsresponse": {
      "title": "Get Rounds response",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "pageIndex": {
          "type": "integer",
          "format": "int32"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "total": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "data",
        "pageIndex",
        "pageSize",
        "total"
      ]
    }
  }
}